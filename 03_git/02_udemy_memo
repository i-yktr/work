- gitはfileのバージョンを管理するための存在する
  - 最新のファイルがわかる
  - 間違って上書きするなどを防げる

- gitの歴史
  - リーナス・トーバルズ
  - GitHubはオンラインでコードの保管ができる
  - GitHubは複数人開発の機能を提供している
    - プルリクエスト
    - 世界中のチームのソフトウェアが見える
    - ソーシャルコーディングの場ともいわれる

- Gitはスナップショット or 差分？
  - Gitのファイルの保管は差分でなくスナップショット
    - ブランチ作成・マージの際、差分だと計算が必要で遅い、スナップショットだと早い
    - Git以前のバージョン管理ツールは差分だった

- バージョンを記録することで以前のバージョンに戻せる

- Gitはデータをスナップショットで保存してる、コミットが直前のコミットを記録してるので戻せる

- ローカル
  - ワークツリー、ステージ、ローカルリポジトリ
  - ステージとは、コミットする変更を準備する場所
    - なぜステージがあるか？手元でたくさん作業したときに、どれかをチョイスしてコミットしたいから

- Gitのデータ構造
  - ローカルリポジトリの持ち方
    1. git add
      1. 圧縮ファイルAを作成：（ヘッダ情報 + index.htmlの内容）→ハッシュで暗号化
      1. インデックスを作成：index.htmlというファイル名と圧縮ファイルAを紐づけ
    1. git commit
      1. ツリー1作成：インデックスに保存されるファイル構成を改めて保存
      1. コミット1： ツリー1、作成者、日付、コミットメッセージを保存
    1. インデックスツリーが別なのはなぜ？
      1. 一部をコミットしたい可能性があるので
    1. Gitの本質はデータを圧縮して、スナップショットで保存している

- Gitのコマンド
  - git init
    - .git
      - 圧縮ファイル
      - ツリーファイル
      - コミットファイル
  - git clone <リポジトリ名>
  - ステージはなんのためにある？
  - git add <ファイル名>
  - git add <ディレクトリ名>
  - git add .
  - git commit
  - git commit -m "コミットメッセージ"
  - git commit -v → 変更対象ファイルだけでなく、変更内容も合わせて見れる
  - コミットメッセージの書き方
    - わかりやすくかく
      - 1行で要点 + 変更理由
      - 1行目：要点、2行目：空行、3行名：変更理由
  - git status
  - git diff <ファイル名>
  - git diff
  - git diff --staged
  - git log
  - git log --oneline
  - git log -p <ファイル名>
  - git log -n <コミット数> 最新のコミットのみ見れる
  - ファイルの削除はgit add、commitとは別のコマンドを使用する
  - # ファイルごと削除
  - git rm <ファイル名>
  - git rm -r <ディレクトリ名>
  - ファイルを残したいとき
  - git rm --chached <ファイル名> ※リポジトリからは消したいけどワークツリーからは消したくない
  - git mv <旧ファイル> <新ファイル>
    - 以下と同じ  
      - mv <旧ファイル> <新ファイル>
      - git rm <旧ファイル>
      - git add <新ファイル>
  - git remote add origin <リモートリポジトリのURL> は別名登録してるだけ
  - git push <リモート名> <ブランチ名>
  - git remote add origin https://github.com/i-yktr/git_tutorial.git
  - git push -u origin master ※-uを初回につけると認証が次回以降不要になる
  - macの人はキーチェーンアクセス
  - コマンドにエイリアスをつける
    - git config --global alias.ci commit
    - git config --global alias.st status
    - git config --global alias.br branch
    - git config --global alias.co checkout
  - .gitignore
    - #はコメント
  
  - ファイルの変更を取り消す（stagedから指定ファイルの情報を取得してワークツリーに反映）
    - git checkout -- <ファイル名> ※ --はブランチ指定なし
    - git checkout -- <ディレクトリ名>
    - git checkout -- .
  - ステージした変更を取り消す（ステージから消すだけなので、ワークツリーの変更は消えない）
    - リポジトリから最新のコミットの内容を取得して、ステージに反映
    - HEADは現在のブランチの最新のコミットのこと
    - git reset HEAD <ファイル名>
    - git reset HEAD <ディレクトリ名>
  - git statusに次のコマンド書いてある
  - 直前のコミットを修正したいとき
    - git commit --amend
    - 今のステージの状態をもとに直前の状態を作り直す（修正漏れをaddできる）
    - 注意点はリモートリポジトリにpush済のコミットは修正してはいけない
      - 別の誰かが修正前コミットを取り込んでいた場合、取り込んだ側に不整合が発生するため
      - push隅の場合はcommitを普通にして修正
  - git log -p
  - git remote ※リモート名のみ
  - git remote -v ※リモート名 + URL
  - リモートリポジトリは複数登録することができる
    - git remote add <リモート名> <リモートURL>
  - 取得
    - git fetch <リモート名>
    - git merge
    - git branch -a
    - git checkout <ブランチ名>

  - pull
    - git pull origin master
    - git pull
    - git fetch
    - git merge
  - fetchとpullの使い分け
    - fetchを基本的に使用するのがオススメ
    - pullは楽だが挙動が特殊なので注意が必要
      - 注意点
        - 現在自分がいるブランチにマージ対象が統合される
  - git remote show <リモート名>
  - リモート名の変更・削除
    - git remote rename <旧> <新>
    - git remote rm <リモート名>

- ブランチとマージ
  - ブランチがあると並行しながら複数機能を開発できる
  - ブランチの仕組み
    - ブランチはコミットを指示したポインタ
    - HEADは今自分が作業しているブランチを示したポインタ
  - ブランチとHEADの中身
    - ブランチはコミットを指すポインタ
    - HEADはブランチへのポインタ
- ブランチ
  - git branch <ブランチ名>
  - git branch
  - git branch -a ※リモートリポジトリも表示する
  - git checkout <既存ブランチ名>
  - git checkout -b <新規ブランチ名>
- マージ
  - ほかの人の変更内容を自分のブランチに統合する
  - git merge <ブランチ名>
  - git merge >リモート名/ブランチ名?
  - マージには3種類ある
    - fast foward 枝分かれしていないときはポインタを進めるだけ
    - auto merge 基本的なマージ、枝分かれしてる場合ｍマージコミットという新しいコミットを作る
      - マージコミットは親を2つもつ
  
- リベース
  - 変更を統合する際に、履歴をきれいにするために使用
  - git rebase ブランチ名
  - 親コミットを切り替える
  - リベースとマージの違いは履歴が一直線化どうか（枝分かれしてるかどうか）
  - githubにpushしたコミットはリベースするのはNG
  - git push -fは絶対NG → gitの履歴が壊れる

- マージ vs リベース
  - マージの特徴
    - コンフリクトの解決が簡単
    - マージコミットがたくさんあると履歴が複雑化
  - リベースの特徴
    - 履歴をきれいに保つことができる
    - コンフリクトの解決が若干面倒
  - 作業の履歴を残したい場合、マージ、そうでなく履歴をきれいに保ちたいならリベース
  - リベースは各コミットごとにリベース（コミット作り直し）するので、
    コンフリクトがあった場合、コミット数分のコンフリクトが発生する

- pullにはマージ型とリベース型がある
  - マージ型
    - git pull <リモート名> <ブランチ名>
    - マージコミットが残る
  - リベース型
    - git pull --rabase <リモート名> <ブランチ名>
    - マージコミットが残らない
    - デフォルトでリベース型にする設定  
      - git config --global pull.rebase true
      - git config branch.master.rabase true

- コミットを整えてからpushする方法
  - git rebase -i <コミットID>
  - git rebase -i HEAD~3
    - インタラクティブ　対話的リベース
  - git commit --amend
  - git continue

  - 並び変える
  - まとめる squash
  - 分割
    - git reset HEAD~
    - git add reademe
    - git commit
    - git add index.html
    - git commit
    - git rebase --continue

- タグ
  - リリースポイントのコミットに名前を付ける
    - git tag
    - git tag l "201705"
    - 注釈付き版と軽量版のタグがある
    - 注釈付き・・・名前、コメント、署名
      - git tag -a [タグ名] -m "メッセージ"
    - 計量版・・・名前
      - git tag [タグ名] -m "メッセージ"
      - 昔のコミットに後からタグつけできる
    - タグのデータを表示する 
      - タグのデータを表示する

- タグはgit pushで別途指定が必要
  - git push [リモート名] [タグ名]
  - git push origin --tags
  - git push 

- スタッシュ
  - git stash
  - git stash sava ※ savaは省略可能
  - git stash list
  - git stash apply [スタッシュ名]
    - git stash apply 0
  - git stash drop [スタッシュ名]
    - git stash drop 0
    - git stash ckear
